import "$commonTemplates.JavaClass$"

TConsumer(classInfo, types) ::= <<
package $classInfo.packageName$;

import java.util.Objects;
import java.util.function.Consumer;

/** {@link Consumer} helper interfaces for primitive types
 * @author TeamworkGuy2
 * @since 2015-1-25
 */
@javax.annotation.Generated("StringTemplate")
public interface $ClassTypeDefinition(classInfo)$ {

$types:{var |
	@FunctionalInterface
	public interface $var.type1.typeShortTitleCase$ $ClassExtendImplement(var.classInfo)${

		/** Performs an operation on the given argument.
		 * @param value the $var.type1.type$ argument
		 */
$if(var.override)$		@Override
$endif$		public void accept($var.type1.type$ value);


		default $classInfo.className$.$var.type1.typeShortTitleCase$ andThen($classInfo.className$.$var.type1.typeShortTitleCase$ after) {
			Objects.requireNonNull(after);
			return ($var.type1.type$ t) -> {
				accept(t);
				after.accept(t);
			\};
		\}

	\}


}$
}

>>