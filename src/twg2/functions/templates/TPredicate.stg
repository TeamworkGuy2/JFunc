import "$commonTemplates.JavaClass$"


TPredicate(var) ::= <<
package functionUtils;

import java.util.Objects;
import java.util.function.Predicate;

/** A {@link Predicate\} for $var.type1.type$
 * @author TeamworkGuy2
 * @since 2015-1-23
 */
@javax.annotation.Generated("StringTemplate")
@FunctionalInterface
public interface $ClassTypeDefinition(var.classInfo)$ {


	/** Check if the $var.type1.type$ meets some condition
	 * @param value the $var.type1.type$ to check
	 * @return true if the value fulfills the condition, false if the value does not
	 */
$if(var.override)$	@Override
$endif$	public boolean test($var.type1.type$ value);


	default $ClassType(var.classInfo)$ and($ClassType(var.classInfo)$ other) {
		Objects.requireNonNull(other);
		return (value) -> test(value) && other.test(value);
	\}


$if(var.override)$	@Override
$endif$	default $ClassType(var.classInfo)$ negate() {
		return (value) -> !test(value);
	\}


	default $ClassType(var.classInfo)$ or($ClassType(var.classInfo)$ other) {
		Objects.requireNonNull(other);
		return (value) -> test(value) || other.test(value);
	\}

\}

>>
