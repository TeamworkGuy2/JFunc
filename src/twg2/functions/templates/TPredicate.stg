import "$commonTemplates.JavaClass$"


TPredicate(classInfo, types) ::= <<
package $classInfo.packageName$;

import java.util.Objects;
import java.util.function.Predicate;

/** {@link Predicate\} helper interfaces for primitive types
 * @author TeamworkGuy2
 * @since 2015-1-23
 */
@javax.annotation.Generated("StringTemplate")
public interface $ClassTypeDefinition(classInfo)$ {

$types:{var | 
	@FunctionalInterface
	public interface $ClassTypeDefinition(var.classInfo)$ {

		/** Check if the $var.type1.type$ meets some condition
		 * @param value the $var.type1.type$ to check
		 * @return true if the value fulfills the condition, false if the value does not
		 */
$if(var.override)$	@Override
$endif$		public boolean test($var.type1.type$ value);


		default $classInfo.className$.$ClassType(var.classInfo)$ and($classInfo.className$.$ClassType(var.classInfo)$ other) {
			Objects.requireNonNull(other);
			return (value) -> test(value) && other.test(value);
		\}


$if(var.override)$	@Override
$endif$		default $classInfo.className$.$ClassType(var.classInfo)$ negate() {
			return (value) -> !test(value);
		\}


		default $classInfo.className$.$ClassType(var.classInfo)$ or($classInfo.className$.$ClassType(var.classInfo)$ other) {
			Objects.requireNonNull(other);
			return (value) -> test(value) || other.test(value);
		\}

	\}


}$
\}

>>
